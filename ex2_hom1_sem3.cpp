#include <iostream>
/*1) int *ptr = (int*)malloc(sizeof(int)) - В C++ аналогичная операция будет выглядеть так: int *ptr = new int;
2) int *ptrArr = (int*)malloc(sizeof(int)*N) - В C++ аналогичная операция будет выглядеть так: int *ptrArr = new int[N];
3) free(ptr) - В C++ необходимо использовать оператор delete для освобождения памяти: delete ptr;
4) free(ptrArr) - В C++ необходимо использовать оператор delete[] для освобождения памяти: delete[] ptrArr.

В C++ необходимо освобождать выделенную динамическую память с помощью операторов delete и delete[].
Попытка освободить одну и ту же память дважды может привести к неопределенному поведению программы.
Освобождение невыделенной памяти также может привести к неопределенному поведению программы. 
Поэтому следует быть внимательным при управлении динамической памятью и освобождать только выделенные ресурсы.*/

int main() {
    // Ввод количества строк у пирамиды
    int numRows;
    std::cout << "Введите количество строк пирамиды: ";
    std::cin >> numRows;

    // Проверка валидности введенного значения
    if (numRows <= 0) {
        std::cout << "Количество строк должно быть положительным числом." << std::endl;
        return 0;
    }

    // Выделение памяти для двумерного массива пирамиды
    int** pyramid = new int* [numRows];

    // Инициализация каждой строки массива
    for (int i = 0; i < numRows; i++) {
        pyramid[i] = new int[i + 1];
    }

    // Заполнение массива значениями из ряда Фибоначчи
    for (int i = 0; i < numRows; i++) {
        int fib1 = 0;
        int fib2 = 1;

        for (int j = 0; j <= i; j++) {
            pyramid[i][j] = fib1;

            int nextFib = fib1 + fib2;
            fib1 = fib2;
            fib2 = nextFib;
        }
    }

    // Вывод пирамиды на экран
    for (int i = 0; i < numRows; i++) {
        // Перемещение по массиву через указатели
        for (int j = 0; j <= i; j++) {
            std::cout << *(*(pyramid + i) + j) << " ";
        }
        std::cout << std::endl;
    }

    // Освобождение выделенной памяти
    for (int i = 0; i < numRows; i++) {
        delete[] pyramid[i];
    }
    delete[] pyramid;

    return 0;
}
